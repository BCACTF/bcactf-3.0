# gen script

p = 25854458289211
q = 94819274320962195588391046032702062340347787753861707917333803643013756112498232723436129143357983211782575094016538160601055922810359418391115604418400747711916131212069247930840360588635198701990348690076607422776450913659984003956055504691820691172367804759436721489067099363705442358971393631085988763567
e = 65537
c = 98999799116102123119481199510252991164811449110103951085110351110100951046585101981025057125
c_i = power_mod(c, e, n)
# 564821294757794643397264923024262896319938418162067361975239043464095797026401068770491393457675494733286339893448531140461611917094383999568438980881431718162518066997760793975381905628192846966986565357045880322008658585158406186349420366526027108151457442130148185466107727095596643126951328051023864119076639932491216


# ** decryption / solve **
n = 2451500972944572751067639135542724911455699735389455909239072706748572836232480252074031400797211301593443375562946962694274273077543664039604383719893091628336430360455909687693258270869995548362038438414271398400407702884883827901471304659858249570873108083356722001678236438255333957918061509916855914316124827985975637
factor(n) # because sage's built in factoring algorithm is GMP-ECM this will factor using elliptic curves (which is what we want)
# alternatively ecm.factor(n) also works
p = 25854458289211
q = 94819274320962195588391046032702062340347787753861707917333803643013756112498232723436129143357983211782575094016538160601055922810359418391115604418400747711916131212069247930840360588635198701990348690076607422776450913659984003956055504691820691172367804759436721489067099363705442358971393631085988763567
c_i = 564821294757794643397264923024262896319938418162067361975239043464095797026401068770491393457675494733286339893448531140461611917094383999568438980881431718162518066997760793975381905628192846966986565357045880322008658585158406186349420366526027108151457442130148185466107727095596643126951328051023864119076639932491216
e = 65537
phin = (p-1) * (q-1)
tup = xgcd(e, phin)
d = Integer(mod(tup[1], phin))
decr = power_mod(c_i, d, n)
print(decr)


